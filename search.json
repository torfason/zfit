[{"path":"https://torfason.github.io/zfit/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Magnus Thor Torfason Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://torfason.github.io/zfit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Maintainer.","code":""},{"path":"https://torfason.github.io/zfit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason MT (2023). zfit: Fit Models Pipe. https://torfason.github.io/zfit/, https://github.com/torfason/zfit/.","code":"@Manual{,   title = {zfit: Fit Models in a Pipe},   author = {Magnus Thor Torfason},   year = {2023},   note = {https://torfason.github.io/zfit/, https://github.com/torfason/zfit/}, }"},{"path":[]},{"path":"https://torfason.github.io/zfit/index.html","id":"tldr","dir":"","previous_headings":"","what":"TL;DR","title":"Fit Models in a Pipe","text":"tired following: like instead: little package might something .","code":"dat <- mtcars |>   filter(am == 1) lm(mpg ~ wt + hp, data=dat) mtcars |>    filter(am == 1) |>   zlm(mpg ~ wt + hp)"},{"path":"https://torfason.github.io/zfit/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fit Models in a Pipe","text":"zfit makes easier use piped workflow functions don’t “correct” order parameters (first parameter function match object passing pipe). issue especially prevalent model fitting functions, passing processing data.frame (tibble) passing lm() similar functions. pipe passes data object first parameter function, conventional estimation functions expect formula first parameter. package addresses issue three functions make trivial construct pipe-friendly version function: zfunction() reorders arguments function. Just pass name function, name parameter receive piped argument, returns version function parameter coming first. zfold() creates fold (wrapper) around function reordered arguments. sometimes needed instead simple reordering, example achieving correct S3 dispatch, functions report name information output. zfitter() takes estimation function standard format formula data parameter, returns version suitable us pipes (data parameter coming first). Internally, simply calls zfold() function create fold around fitter function. package also includes ready made wrappers around commonly used estimation functions. zlm()zglm() correspond lm() glm(), zlogit(), zprobit(), zpoisson(), use glm() perform logistic poisson regression within pipe. Finally, package includes zprint() function, intended simplify printing derived results, summary(), within pipe, without affecting modeling result .","code":""},{"path":"https://torfason.github.io/zfit/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit Models in a Pipe","text":"Install release version CRAN : Install development version GitHub :","code":"install.packages(\"zfit\") remotes::install_github(\"torfason/zfit\")"},{"path":"https://torfason.github.io/zfit/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Fit Models in a Pipe","text":"examples assume following packages loaded: basic use functions package pass data.frame/tibble zlm(): Often, useful process data.frame/tibble passing zlm(): zprint() function provides simple way “tee” piped object printing derived object, passing original object onward pipe. following code pipes estimation model object zprint(summary). means summary() function called model passed pipe, resulting summary printed. However, zprint(summary) returns original model object, assigned m (instead assigning summary object): zprint() function quite useful within estimation pipeline print summary object without returning summary (using zprint(summary) ), can also used independently estimation models, print summarized version tibble within pipeline processing, without breaking pipeline:","code":"library(zfit) library(dplyr) cars |> zlm(speed ~ dist) iris |>   filter(Species==\"setosa\") |>   zlm(Sepal.Length ~ Sepal.Width + Petal.Width) m <- iris |>   filter(Species==\"setosa\") |>   zlm(Sepal.Length ~ Sepal.Width + Petal.Width) |>   zprint(summary) sw_subset <- starwars |>   zprint(count, homeworld, sort=TRUE) |> # prints counts by homeworld   filter(homeworld==\"Tatooine\") sw_subset  # sw_subset is ungrouped, but filtered by homeworld"},{"path":"https://torfason.github.io/zfit/reference/curly_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Process curly parameters — curly_arg","title":"Process curly parameters — curly_arg","text":"Curly parameters processed using NSE, unless encapsulated curlies {}, optionally triggers standard evaluation. function intended used inside another function, used similar way match.arg(). examples useful ...","code":""},{"path":"https://torfason.github.io/zfit/reference/curly_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process curly parameters — curly_arg","text":"","code":"curly_arg(param)"},{"path":"https://torfason.github.io/zfit/reference/curly_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process curly parameters — curly_arg","text":"param parameter process curly param.","code":""},{"path":"https://torfason.github.io/zfit/reference/curly_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process curly parameters — curly_arg","text":"","code":"# Not run automatically because curly_arg() is private if (FALSE) {   # Usage of curly_arg() compared with match.arg()   curly_demo <- function(x, y = c(\"yes\", \"no\")) {     x <- zfit:::curly_arg(x)     y <- match.arg(y)     x   }    myparam  <- \"a string\"   myvector <- c(\"string 1\", \"string 2\")    curly_demo(a_symbol)       # NSE ON   curly_demo(\"a string\")     # NSE disabled with \"\" for constant strins   curly_demo({\"curly-wrap\"}) # NSE disabled with {}   curly_demo(c(\"a\",\"b\"))     # NSE ON, usually not wanted, quoting preferred   curly_demo({c(\"a\",\"b\")})   # NSE disabled with {}, allowing vectors   curly_demo(myparam)        # NSE ON, even if a value exists for myparam   curly_demo(\"myparam\")      # NSE disabled, result is a string constant   curly_demo({myparam})      # NSE disabled, value of myparam propagates   curly_demo({myvector})     # NSE disabled, value of myvector propagates }"},{"path":"https://torfason.github.io/zfit/reference/external_fitters.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe-friendly wrappers for external fitters — zlm_robust","title":"Pipe-friendly wrappers for external fitters — zlm_robust","text":"functions provide pipe-friendly wrappers around model fitters provided several external packages. functions require corresponding packages installed, required package missing functions warns directions install . zlm_robust() wraps estimatr::lm_robust(), fits linear model variety options estimating robust standard errors. zpolr() wraps MASS::polr(), fits ordered logistic response multi-value ordinal variables, using proportional odds logistic regression. zplsr() wraps pls::plsr(), performs partial least squares regression.","code":""},{"path":"https://torfason.github.io/zfit/reference/external_fitters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe-friendly wrappers for external fitters — zlm_robust","text":"","code":"if (requireNamespace(\"estimatr\") && getRversion() >= \"4.1.0\")   zlm_robust(cars, dist ~ speed) |> summary() |> try() #>  #> Call: #> lm_robust(formula = dist ~ speed, data = cars) #>  #> Standard error type:  HC2  #>  #> Coefficients: #>             Estimate Std. Error t value  Pr(>|t|) CI Lower CI Upper DF #> (Intercept)  -17.579     5.7323  -3.067 3.551e-03  -29.105   -6.053 48 #> speed          3.932     0.4128   9.526 1.211e-12    3.102    4.762 48 #>  #> Multiple R-squared:  0.6511 ,\tAdjusted R-squared:  0.6438  #> F-statistic: 90.75 on 1 and 48 DF,  p-value: 1.211e-12  if (requireNamespace(\"MASS\") && getRversion() >= \"4.1.0\")   zpolr(mtcars, ordered(gear) ~ mpg + hp) |> summary() |> try() #>  #> Re-fitting to get Hessian #> Call: #> polr(formula = ordered(gear) ~ mpg + hp, data = mtcars) #>  #> Coefficients: #>       Value Std. Error t value #> mpg 0.37279   0.123027   3.030 #> hp  0.02002   0.009634   2.078 #>  #> Intercepts: #>     Value   Std. Error t value #> 3|4 10.1578  3.6605     2.7750 #> 4|5 12.7982  4.0427     3.1657 #>  #> Residual Deviance: 51.16071  #> AIC: 59.16071   if (requireNamespace(\"pls\") && getRversion() >= \"4.1.0\")   zplsr(cars, dist ~ speed) |> summary() |> try() #> Data: \tX dimension: 50 1  #> \tY dimension: 50 1 #> Fit method: kernelpls #> Number of components considered: 1 #> TRAINING: % variance explained #>       1 comps #> X      100.00 #> dist    65.11"},{"path":"https://torfason.github.io/zfit/reference/zfit.html","id":null,"dir":"Reference","previous_headings":"","what":"zfit: Fit Models in a Pipe — zfit","title":"zfit: Fit Models in a Pipe — zfit","text":"Improve usage model fitting functions within piped work flow.","code":""},{"path":"https://torfason.github.io/zfit/reference/zfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"zfit: Fit Models in a Pipe — zfit","text":"zfit makes easier use piped workflow functions don’t “correct” order parameters (first parameter function match object passing pipe). issue especially prevalent model fitting functions, passing processing data.frame (tibble) passing lm() similar functions. pipe passes data object first parameter function, conventional estimation functions expect formula first parameter. package addresses issue three functions make trivial construct pipe-friendly version function: zfunction() reorders arguments function. Just pass name function, name parameter receive piped argument, returns version function parameter coming first. zfold() creates fold (wrapper) around function reordered arguments. sometimes needed instead simple reordering, example achieving correct S3 dispatch, functions report name information output. zfitter() takes estimation function standard format formula data parameter, returns version suitable us pipes (data parameter coming first). Internally, simply calls zfold() function create fold around fitter function. package also includes ready made wrappers around commonly used estimation functions. zlm()zglm() correspond lm() glm(), zlogit(), zprobit(), zpoisson(), use glm() perform logistic poisson regression within pipe. Finally, package includes zprint() function, intended simplify printing derived results, summary(), within pipe, without affecting modeling result .","code":""},{"path":[]},{"path":"https://torfason.github.io/zfit/reference/zfunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pipe-friendly version of a function — zfunction","title":"Create a pipe-friendly version of a function — zfunction","text":"functions serve role rearranging arguments functions, order create pipe-friendly versions. zfunction() rearranges arguments function moving specified argument front list, argument becomes recipient piping. returns copy input function, identical original except order arguments. zfold() creates pipe-friendly version function standard format creating fold (wrapper) around parameters reordered. Compared using zfunction(), makes copy original function rearranged parameters, creates wrapper turn call original function passed parameters. good making pipe-friendly versions S3 generics, whereas rearranging parameters directly break S3 dispatch mechanism. zfitter() creates pipe-friendly version fitting function standard format –– function formula parameter followed data parameter. also shortens long data names (longer 32 characters default), otherwise nuisance data comes pipe, pipeline gets converted long function call.","code":""},{"path":"https://torfason.github.io/zfit/reference/zfunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pipe-friendly version of a function — zfunction","text":"","code":"zfunction(fun, x, x_not_found = c(\"error\", \"warning\", \"ok\"))  zfold(fun, x, x_not_found = c(\"error\", \"warning\", \"ok\"))  zfitter(fun)"},{"path":"https://torfason.github.io/zfit/reference/zfunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pipe-friendly version of a function — zfunction","text":"fun function adapt (zfitter() fitting function takes formula data parameters). name quoted, rather, actual function passed (prefixed package needed). x name argument moved front argument list. Can passed without quotes, processed using non-standard evaluation unless surrounded curlies, {value}, see details . x_not_found handle case value x name parameter fun. error, abort function. ok, prepend value existing parameter list. can useful looking pipe data parameter hidden ....","code":""},{"path":"https://torfason.github.io/zfit/reference/zfunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a pipe-friendly version of a function — zfunction","text":"x parameter processed using non-standard evaluation, can disabled using curly brackets. words, following equivalent, return file renaming function parameter first one: zfunction(file.rename, ) zfunction(file.rename, \"\") param_name <- \"\"; zfunction(file.rename, {param_name})","code":""},{"path":"https://torfason.github.io/zfit/reference/zfunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pipe-friendly version of a function — zfunction","text":"","code":"# A a grep function with x as first param is often useful zgrep <- zfunction(grep, x) carnames <- rownames(mtcars) grep(\"ll\", carnames, value=TRUE) #> [1] \"Cadillac Fleetwood\" \"Toyota Corolla\"     \"Dodge Challenger\"   zgrep(carnames, \"ll\", value=TRUE) #> [1] \"Cadillac Fleetwood\" \"Toyota Corolla\"     \"Dodge Challenger\"    # zfunction() is the best approach to wrapping functions such as # `pls::plsr()` that hide the data parameter behind the `...`. if (requireNamespace(\"pls\")) {   zplsr <- zfunction(pls::plsr, data, x_not_found = \"ok\")   zplsr(cars, dist ~ speed) } #> Partial least squares regression, fitted with the kernel algorithm. #> Call: #> plsr(formula = dist ~ speed, data = cars)  # Curly {x} handling: These are all equivalent param_name <- \"to\"; f1 <- zfunction(file.rename, to) f2 <- zfunction(file.rename, \"to\") f3 <- zfunction(file.rename, {param_name})  # Using zfold() to create a grep() wrapper with the desired arg order zgrep <- zfold(grep, x) carnames <- rownames(mtcars) grep(\"ll\", carnames, value=TRUE) #> [1] \"Cadillac Fleetwood\" \"Toyota Corolla\"     \"Dodge Challenger\"   zgrep(carnames, \"ll\", value=TRUE) #> [1] \"Cadillac Fleetwood\" \"Toyota Corolla\"     \"Dodge Challenger\"    # Using zfitter to wrap around a fitting function # (this is the actual way zlm_robust is defined in this package) if (requireNamespace(\"estimatr\", quietly = TRUE)) {   zlm_robust <- zfitter(estimatr::lm_robust)   zlm_robust(cars, speed~dist)    # The resulting function works well the native pipe ...   if ( getRversion() >= \"4.1.0\" ) {     cars |> zlm_robust( speed ~ dist )   } } #>              Estimate Std. Error  t value     Pr(>|t|)  CI Lower   CI Upper DF #> (Intercept) 8.2839056 0.90884644 9.114747 4.810799e-12 6.4565474 10.1112639 48 #> dist        0.1655676 0.02004456 8.259977 8.937493e-11 0.1252653  0.2058699 48  # ... or with dplyr if ( require(\"dplyr\", warn.conflicts=FALSE) ) {    # Pipe cars dataset into zlm_robust for fitting   cars %>% zlm_robust( speed ~ dist )    # Process iris with filter() before piping. Print a summary()   # of the fitted model using zprint() before assigning the   # model itself (not the summary) to m.   m <- iris %>%     dplyr::filter(Species==\"setosa\") %>%     zlm_robust(Sepal.Length ~ Sepal.Width + Petal.Width) %>%     zprint(summary) } #> Loading required package: dplyr #>  #> Call: #> lm_robust(formula = Sepal.Length ~ Sepal.Width + Petal.Width,  #>     data = .) #>  #> Standard error type:  HC2  #>  #> Coefficients: #>             Estimate Std. Error t value  Pr(>|t|) CI Lower CI Upper DF #> (Intercept)   2.6300    0.28845   9.118 5.785e-12   2.0497   3.2103 47 #> Sepal.Width   0.6664    0.08766   7.602 1.006e-09   0.4901   0.8428 47 #> Petal.Width   0.3723    0.28977   1.285 2.052e-01  -0.2107   0.9552 47 #>  #> Multiple R-squared:  0.5631 ,\tAdjusted R-squared:  0.5445  #> F-statistic:    37 on 2 and 47 DF,  p-value: 2.23e-10"},{"path":"https://torfason.github.io/zfit/reference/zglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a glm model in a pipe — zglm","title":"Run a glm model in a pipe — zglm","text":"functions wrappers glm function. zglm function can used estimate generalized linear model pipe. zlogit, zprobit, zpoisson functions can used estimate specific models. functions rely glm function actual estimation, simply pass corresponding values family parameter glm function. Usage functions similar zlm function (wrapper lm), detailed examples, check entry function. zlogit function calls zglm, specifying family=binomial(link=\"logit\"). zprobit function calls zglm, specifying family=binomial(link=\"probit\"). zpoisson function calls zglm, specifying family=\"poisson\".","code":""},{"path":"https://torfason.github.io/zfit/reference/zglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a glm model in a pipe — zglm","text":"","code":"zglm(   data,   formula,   family = gaussian,   weights,   subset,   na.action,   start = NULL,   etastart,   mustart,   offset,   control = list(...),   model = TRUE,   method = \"glm.fit\",   x = FALSE,   y = TRUE,   singular.ok = TRUE,   contrasts = NULL,   ... )  zlogit(data, formula, ...)  zprobit(data, formula, ...)  zpoisson(data, formula, ...)"},{"path":"https://torfason.github.io/zfit/reference/zglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a glm model in a pipe — zglm","text":"data data.frame containing model data. formula formula fitted. family See glm function. weights See glm function. subset See glm function. na.action See glm function. start See glm function. etastart See glm function. mustart See glm function. offset See glm function. control See glm function. model See glm function. method See glm function. x See glm function. y See glm function. singular.ok See glm function. contrasts See glm function. ... arguments passed glm function.","code":""},{"path":"https://torfason.github.io/zfit/reference/zglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a glm model in a pipe — zglm","text":"fitted model.","code":""},{"path":[]},{"path":"https://torfason.github.io/zfit/reference/zlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an lm model in a pipe. — zlm","title":"Run an lm model in a pipe. — zlm","text":"function wraps around lm function order make friendly pipe syntax (data first).","code":""},{"path":"https://torfason.github.io/zfit/reference/zlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an lm model in a pipe. — zlm","text":"","code":"zlm(   data,   formula,   subset,   weights,   na.action,   method = \"qr\",   model = TRUE,   x = FALSE,   y = FALSE,   qr = TRUE,   singular.ok = TRUE,   contrasts = NULL,   offset,   ... )"},{"path":"https://torfason.github.io/zfit/reference/zlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an lm model in a pipe. — zlm","text":"data data.frame containing model data. formula formula fitted. subset See lm function. weights See lm function. na.action See lm function. method See lm function. model See lm function. x See lm function. y See lm function. qr See lm function. singular.ok See lm function. contrasts See lm function. offset See lm function. ... arguments passed lm function.","code":""},{"path":"https://torfason.github.io/zfit/reference/zlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an lm model in a pipe. — zlm","text":"fitted model.","code":""},{"path":[]},{"path":"https://torfason.github.io/zfit/reference/zlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an lm model in a pipe. — zlm","text":"","code":"# Usage is possible without pipes zlm( cars, dist ~ speed ) #>  #> Call: #> lm(formula = dist ~ speed, data = cars) #>  #> Coefficients: #> (Intercept)        speed   #>     -17.579        3.932   #>   # zfit works well with dplyr and magrittr pipes if ( require(\"dplyr\", warn.conflicts=FALSE) ) {    # Pipe cars dataset into zlm for fitting   cars %>% zlm(speed ~ dist)    # Process iris with filter before piping to zlm   iris %>%     filter(Species == \"setosa\") %>%     zlm(Sepal.Length ~ Sepal.Width + Petal.Width) } #>  #> Call: #> lm(formula = Sepal.Length ~ Sepal.Width + Petal.Width, data = .) #>  #> Coefficients: #> (Intercept)  Sepal.Width  Petal.Width   #>      2.6300       0.6664       0.3723   #>   # zfit also works well with the native pipe if ( require(\"dplyr\") && getRversion() >= \"4.1.0\" ) {    # Pipe cars dataset into zlm for fitting   cars |> zlm(speed ~ dist)    # Process iris with filter() before piping. Print a   # summary of the fitted model using zprint() before   # assigning the model itself (not the summary) to m.   m <- iris |>     filter(Species == \"setosa\") |>     zlm(Sepal.Length ~ Sepal.Width + Petal.Width) |>     zprint(summary) } #>  #> Call: #> lm(formula = Sepal.Length ~ Sepal.Width + Petal.Width, data = filter(iris,  #>     Species == \"setosa\")) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.50350 -0.17022  0.02213  0.15569  0.46314  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.63000    0.30928   8.504 4.56e-11 *** #> Sepal.Width  0.66640    0.09219   7.229 3.68e-09 *** #> Petal.Width  0.37227    0.33159   1.123    0.267     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2379 on 47 degrees of freedom #> Multiple R-squared:  0.5631,\tAdjusted R-squared:  0.5445  #> F-statistic: 30.29 on 2 and 47 DF,  p-value: 3.541e-09 #>"},{"path":"https://torfason.github.io/zfit/reference/zprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the result of a function in a pipe but return original object — zprint","title":"Print the result of a function in a pipe but return original object — zprint","text":"Given x f, function prints f(x) returning original x. useful pipe, one wants print derivative object pipe return assign original object. common use case printing `summary() estimated model assigning original model (rather summary object) variable processing.","code":""},{"path":"https://torfason.github.io/zfit/reference/zprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the result of a function in a pipe but return original object — zprint","text":"","code":"zprint(x, f = NULL, ...)"},{"path":"https://torfason.github.io/zfit/reference/zprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the result of a function in a pipe but return original object — zprint","text":"x object, typically pipe. f function applied x printing. ... arguments passed f.","code":""},{"path":"https://torfason.github.io/zfit/reference/zprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the result of a function in a pipe but return original object — zprint","text":"original object x.","code":""},{"path":"https://torfason.github.io/zfit/reference/zprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the result of a function in a pipe but return original object — zprint","text":"","code":"if (getRversion() >= \"4.1.0\" && require(\"dplyr\")) {    # Print summary before assigning model to variable   m <- lm( speed ~ dist, cars) |>     zprint(summary) # prints summary(x)   m                 # m is the original model object    # Print grouped data before filtering original   cw_subset <- chickwts |>     zprint(count, feed, sort=TRUE) |> # prints counts by feed     filter(feed==\"soybean\")   cw_subset # cw_subset is ungrouped, but filtered by feed } #>  #> Call: #> lm(formula = speed ~ dist, data = cars) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -7.5293 -2.1550  0.3615  2.4377  6.4179  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  8.28391    0.87438   9.474 1.44e-12 *** #> dist         0.16557    0.01749   9.464 1.49e-12 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 3.156 on 48 degrees of freedom #> Multiple R-squared:  0.6511,\tAdjusted R-squared:  0.6438  #> F-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12 #>  #>        feed  n #> 1   soybean 14 #> 2    casein 12 #> 3   linseed 12 #> 4 sunflower 12 #> 5  meatmeal 11 #> 6 horsebean 10 #>    weight    feed #> 1     243 soybean #> 2     230 soybean #> 3     248 soybean #> 4     327 soybean #> 5     329 soybean #> 6     250 soybean #> 7     193 soybean #> 8     271 soybean #> 9     316 soybean #> 10    267 soybean #> 11    199 soybean #> 12    171 soybean #> 13    158 soybean #> 14    248 soybean"},{"path":"https://torfason.github.io/zfit/news/index.html","id":"zfit-030","dir":"Changelog","previous_headings":"","what":"zfit 0.3.0","title":"zfit 0.3.0","text":"CRAN release: 2022-01-17 Two general-purpose wrapping functions quickly create custom wrappers fitting functions wrapper provided. required dependencies.","code":""},{"path":"https://torfason.github.io/zfit/news/index.html","id":"zfit-020","dir":"Changelog","previous_headings":"","what":"zfit 0.2.0","title":"zfit 0.2.0","text":"New wrapper estimating poisson models (glm), meaning built-wrappers now include lm, glm, logit, probit poisson models. Documentation web site.","code":""},{"path":"https://torfason.github.io/zfit/news/index.html","id":"zfit-010","dir":"Changelog","previous_headings":"","what":"zfit 0.1.0","title":"zfit 0.1.0","text":"CRAN release: 2020-06-26 initial version zfit","code":""}]
