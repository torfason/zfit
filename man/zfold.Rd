% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/base_b_zfold.R
\name{zfold}
\alias{zfold}
\title{Create pipe-friendly fold around a function}
\usage{
zfold(fun, x, x_not_found = c("error", "warning", "ok"))
}
\arguments{
\item{fun}{The function to adapt. The name should not be quoted,
rather, the actual function should be passed (prefixed with package
if needed)}

\item{x}{The name of the argument that should be moved to the front of the
argument list. Can be passed with or without quotes, and is processed using
non-standard evaluation unless surrounded with curlies, as in \code{{value}},
see details below}

\item{x_not_found}{How to handle the case where the value of \code{x} x ix not the
name of a parameter in fun. If \code{error}, abort the function. If \code{ok}, prepend the value to the
existing parameter list. This can be useful if looking to pipe data into a parameter that
is hidden by a \code{...}.}
}
\description{
The \code{zfold()} creates a pipe-friendly version of a function of the
standard format by creating a fold (or wrapper) around it with
the parameters reordered.

Compared to just using \code{zfunction()}, which makes a copy of the original
function with rearranged the parameters, this function will call the original
function with all passed parameters. Among other things, it makes it possible
to make pipe-friendly versions of \code{S3} generics, whereas rearranging
parameters directly will break the \code{S3} dispatch mechanism.
}
\examples{
char_vector <- rownames(mtcars)
zgrep <- zfold(grep, x)
grep("ll", char_vector, value=TRUE)
zgrep(char_vector, "ll", value=TRUE)

}
